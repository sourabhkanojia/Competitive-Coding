
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Permutation And Combination

***Distinct Objects into Distinct Bins n times  r×r×r×?×r=(r^n)ways or (nck)(r^k)

***Distinct Objects into Identical Bins
Consider these two cases:
1.Distinct objects into identical bins with no empty bin - Stirling numbers of the second kind
2.Distinct objects into any number of identical bins - Bell numbers

*Stirling numbers of the second kind-:
1. Number of bins > Number of objects ->0
2. Number of bins = Number of objects ->1
3. Number of bins = Number of objects-1 ->nc2
4. Number of bins = Number of objects-2 ->nc3+3(nc4)
5. Number of bins = 1 ->1
6. Number of bins = 2 ->(2^n - 2)/2 -->2^(n-1)-1
From these basic cases, any value of S(n,r) can be calculated through the recurrence relation: S(n,r)=rS(n-1,r)+S(n-1,r-1)

*Bell Numbers ->Previous examples required the objects to be placed in a specific number of non-empty bins.
There is a related problem in which objects can be placed in any number of non-empty bins.
---The Bell numbers count the number of ways n distinct objects can be distributed into up to n identical non-empty bins.(The partitions of a set of n objects into non-empty disjoint subsets whose union is the entire set.)
                       n
Recurrence Formula->Bn=?S(n,k)
                      k=1

***Identical Objects into Distinct Bins
1.Stars and Bars Approach -> As a general rule, if we would like to divide the stars into r distinct groups, this will require r-1 bars.

2.General Case of Identical Objects into Distinct Groups -> Suppose there are n identical objects to be distributed among r distinct bins. 
  This can be done in precisely (n+r-1)C(r-1) or (n+r-1)C(n) ways.

3.Distribution into Non-Empty Bins -> Suppose there are n identical objects to be distributed among r distinct non-empty bins, with n>=r.
  This can be done in precisely (n-1)C(r-1) ways.

***Identical Objects Into Identical Bins
*The "identical objects into identical bins" problem is closely related to the problem of partitioning an integer.

1.The number of distributions of n identical objects into any number of identical bins is p(n), where p(n) is the partition function.

2.The number of partitions of an integer n into r parts is the same as the number of partitions of n for which the largest part is r.
  The partition function for which the largest part is r is denoted as p(n,r).

  **If n=2r, then p(n,r)=p(n-r)
Base Cases:

Case 1: n<r -> There are not enough objects to go into each bin. Therefore, the number of distribution is 0.
Case 2: n=r -> There is exactly 1 object for each bin. Therefore, there is only 1 distribution.
Case 3: n=r+1 -> There is exactly 11 object for each bin, and 1 more object left to be placed. It does not matter which bin it is placed into, so there is exactly 1 distribution.
Case 4: r=1 -> There is only one bin the objects can go into, so there is only 1 distribution.
Case 5: r=2 -> If n is odd, then the number of distributions is{n-1}/{2}. If n is even, then the number of distributions is {n}/{2} 
       r
p(n,r)=E p(n-r,k) Recursive Formula
      k=1

n |p(n)
0 | 1
1 | 1
2 | 2
3 | 3
4 | 5
5 | 7
6 | 11
7 | 15

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Goldbach's conjecture - Every even integer greater than 2 can be written as the sum of two primes.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Maximum no. of division of number.

int[] prime=new int[(int)5e6+1];
        for(int i=2;i<prime.length;i++){
            if(prime[i]==0){
                prime[i]=1;
                for(int j=2*i;j<prime.length;j+=i){
                    prime[j]=prime[j/i]+1;
                }
            }
        }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Euler's totient function

-Euler's totient function, also known as phi-function ?(n), counts the number of integers between 1 and n inclusive, which are coprime to n.

int phi(int n) {
    int result = n;
    for (int i = 2; i * i <= n; i++) {
        if(n % i == 0) {
            while(n % i == 0)
                n /= i;
            result -= result / i;
        }
    }
    if(n > 1)
        result -= result / n;
    return result;
}
?=phi

*If p is a prime number, then gcd(p,q)=1 for all 1=q<p. Therefore we have: ?(p)=p-1.
*If p is a prime number and k>=1, then there are exactly pk/p numbers between 1 and pk that are divisible by p. Which gives us:
?(pk)=pk-pk-1.
*If a and b are relatively prime, then: ?(ab)=?(a)·?(b).
*In general, for not coprime a and b, the equation  ?(ab)=?(a)·?(b)*(d/?(d))  with d=gcd(a,b) holds.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Fenwick Trees(BIT)

class bit{
    int[] tree;
    int size;
    public bit(int size){
        tree=new int[size];
        this.size=size;
    }
// update position by delta
    void update(int i,int delta){
        while(i<=size){
            tree[i]+=delta;
            i+=Integer.lowestOneBit(i);
           //i+=i&(-i);
        }
    }
 // compute the prefix sum value[1,i]
    int sum(int i){
        int sum=0;
        while(i>0){
            sum+=tree[i];
            i-=Integer.lowestOneBit(i);
            //i-=i&(-i)
        }
        return sum;
    }
// compute the sum[i,j];
    int rangeSum(int l,int r){
        return sum(r)-sum(l-1);
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Sparse Table

//Build
int K=log[N];
int st[N][K + 1];
for (int i = 0; i < N; i++)
    st[i][0] = array[i];

for (int j = 1; j <= K; j++)
    for (int i = 0; i + (1 << j) <= N; i++)
        st[i][j] = min(st[i][j-1], st[i + (1 << (j - 1))][j - 1]);

//Query
int log[MAXN+1];
log[1] = 0;
for (int i = 2; i <= MAXN; i++)
    log[i] = log[i/2] + 1;

And the minimum of a range [L,R] can be computed with:

int j = log[R - L + 1];
int minimum = min(st[L][j], st[R - (1 << j) + 1][j]);
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
*Modular Multiplicative Inverse

Multiply both sides of the above equations by a-1, and we get:

For an arbitrary (but coprime) modulus m: a^(?(m)-1)%m=a^(-1)modm
For a prime modulus m: a^(m-2)=a^(-1)modm

From these results, we can easily find the modular inverse using the binary exponentiation algorithm, which works in O(logm) time.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Trie
class TrieNode{
    TrieNode[] next;
    TrieNode(){
        next=new TrieNode[26];
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Z-Function (Pattern Matching) - O(n+m)

String p = "abc";

String m = "abc";
String n = "xabcabzabc";
String s2 = m + "$" + n;
int n = s2.length();
int[] z = new int[n];

for (int i = 1, l = 0, r = 0; i < n; i++) {
    if (i <= r) z[i] = Math.min(r - i + 1, z[i - l]);
    while (i + z[i] < n && s2.charAt(z[i]) == s2.charAt(i + z[i])) z[i]++;
    if (i + z[i] - 1 > r){
	r = i + z[i] - 1;
	l=i;
      }
}

for (int i = 0; i < n; i++) System.out.print(s2.charAt(i) + " ");
System.out.println();
for (int i = 0; i < n; i++) System.out.print(z[i] + " ");
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Manacher's Algorithm

static int[] L;
static void manacher(String text){
        int N = text.length();
        if (N == 0)
            return;
        N = 2 * N + 1; // Position count
        L = new int[N + 1]; // LPS Length Array
        L[0] = 0;
        L[1] = 1;
        int C = 1; // centerPosition
        int R = 2; // centerRightPosition
        int i = 0; // currentRightPosition
        int iMirror; // currentLeftPosition
        int diff = -1;

        for (i = 2; i < N; i++) {
            iMirror = 2 * C - i;
            L[i] = 0;
            diff = R - i;

            if (diff > 0)
                L[i] = Math.min(L[iMirror], diff);

            while (((i + L[i]) + 1 < N && (i - L[i]) > 0) &&
                    (((i + L[i] + 1) % 2 == 0) ||
                            (text.charAt((i + L[i] + 1) / 2) ==
                                    text.charAt((i - L[i] - 1) / 2)))) { L[i]++; }

            if (i + L[i] > R) {
                C = i;
                R = i + L[i];
            }
        }
    }
 /* If you find even length at some index i then
    i=i-1;
    i=i-2;
    i=Math.ceil(i/2.0);
    then i and i+1 will be your center.
    
    If you find odd length at some index i then
    i=i-2;
    i=Math.ceil(i/2.0);
    then i will be your center.
  */
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Convex Hull Jarvis March(Gift wrapping algorithm)

public static Set<Point> convexHull(Point[] points){
        Point start=points[0];
        for(int i=1;i<points.length;i++){
            if(points[i].x<start.x){
                start=points[i];
            }
        }
        Point current=start;
        Set<Point> result=new HashSet<>();
        result.add(start);
        List<Point> collinear=new ArrayList<>();
        while(true){
            Point nextTarget=points[0];
            for(int i=1;i<points.length;i++){
                if(points[i]==current)continue;

                int val=crossProduct(current,nextTarget,points[i]);
                if(val>0){
                    nextTarget=points[i];
                    collinear=new ArrayList<>();
                }
                else if(val==0){
                    if(distance(current,nextTarget,points[i])<0){
                        collinear.add(nextTarget);
                        nextTarget=points[i];
                    }
                    else collinear.add(points[i]);
                }
            }
            for(Point p:collinear)result.add(p);
            if(nextTarget==start)break;
            result.add(nextTarget);
            current=nextTarget;
        }
        return result;
    }
    public static int distance(Point a,Point b,Point c){
        int y1=a.y-b.y,y2=a.y-c.y;
        int x1=a.x-b.x,x2=a.x-c.x;
        return Integer.compare(y1*y1+x1*x1,y2*y2+x2*x2);
    }
    public static int crossProduct(Point a,Point b,Point c){
        int y1=a.y-b.y;
        int y2=a.y-c.y;
        int x1=a.x-b.x;
        int x2=a.x-c.x;
        return y2*x1-y1*x2;
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Arrays.stream(a).forEach(n -> System.out.print(n + " ")); //printing array
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Fast Exponentiation    Time Complexity - O(logb)
static long binpow(long a,  long b,  long m){
        a %= m;
        long res = 1;
        while (b > 0) {
            if ((b&1)==1)
                res = (res * a) % m;
            a = (a * a) % m;
            b >>= 1;
        }
        return res;
    }
////////////////////////////////////////////
long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)res = res * a;
        a = a * a; 
        b >>= 1;
    }
    return res;
}

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Decimal Format
DecimalFormat df = new DecimalFormat("#,###,##0.00");
        System.out.println(df.format(364565.14));
        System.out.println(df.format(364565.1454));

df = new DecimalFormat("#,###,##0.000");
        System.out.println(df.format(364565.14));
        System.out.println(df.format(364565.1454));
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
System.out.printf("%.9f\n", vol / (vv - ee));
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Find Palindromes Of All Length
int[][] dp=new int[5001][5001];

        // Length of 1
        for(int i=1;i<=n;i++){
            dp[i][i]=1;
        }

        // Length of 2
        for(int i=1;i<n;i++){
            if(s.charAt(i)== s.charAt(i+1)){
                dp[i][i+1]=1;
            }
        }

        for(int len=0;len<n-2;len++){
            //i is a starting index
            for(int i=1;i+len<n;i++){
                //if we have a palindrome ans the same letter on both sides of the palindrome
                if(dp[i][i+len]==1 && s.charAt(i-1)== s.charAt(i+len+1)){
                    dp[i-1][i+len+1]=1;
                }
            }
        }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Kosaraju-Sharir

Intuition->It is based on the idea that if one is able to reach a vertex v starting from vertex u,
           then one should be able to reach vertex u starting from vertex v and if such is the case,
	   one can say that vertices u and v are strongly connected.
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Fast Reader
class FastReader
{
    BufferedReader br;
    StringTokenizer st;

    public FastReader()
    {
        br = new BufferedReader(new
                InputStreamReader(System.in));
    }

    String next()
    {
        while (st == null || !st.hasMoreElements())
        {
            try
            {
                st = new StringTokenizer(br.readLine());
            }
            catch (IOException  e)
            {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    int nextInt()
    {
        return Integer.parseInt(next());
    }

    long nextLong()
    {
        return Long.parseLong(next());
    }

    double nextDouble()
    {
        return Double.parseDouble(next());
    }

    String nextLine()
    {
        String str = "";
        try
        {
            str = br.readLine();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        return str;
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
class disjointSet{
    int[] parent;
    int[] size;
    public disjointSet(int v){
      this.parent=new int[v];
      this.size=new int[v];
      makeSet();
    }
    public void makeSet(){
        for(int i=0;i<parent.length;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    public int find(int v){
        if (v == parent[v]) return v;
        return parent[v]=find(parent[v]);
    }
    public void union(int a,int b){
        a=find(a);
        b=find(b);
        if(a!=b){
            if(size[a]<size[b]){
		parent[a]=b;
		size[b]+=size[a];
	    }
            else {
		parent[b]=a;
            	size[a]+=size[b];
	    }
        }
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
*Kadane's Algorithm
public int maxSumSubArray(int[] a){
    int max_current=a[0];
    int max_global=a[0];
    for(int i=1;i<a.length;i++){
        max_current=Integer.max(max_current+a[i],a[i]);
        if(max_current>max_global){
           max_global=max_current;
          }
       }
     return max_global;
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Dijkstra Implementation

public class Candidate {
    public static void main(String[] args) throws Exception {
        FastReader sc=new FastReader();
        int n=sc.nextInt();
        boolean[] visited=new boolean[n];
        int[] weight=new int[n];
        Graph g=new Graph(n);
        int e=sc.nextInt();
        for(int i=0;i<e;i++){
            int x=sc.nextInt(),y=sc.nextInt(),w=sc.nextInt();
            g.addEdge(x,y,w);
        }
        Arrays.fill(weight,Integer.MAX_VALUE);
        weight[0]=0;
        PriorityQueue<Point> pq=new PriorityQueue<>(new Comparator<Point>() {
            @Override
            public int compare(Point o1, Point o2) {
                return o1.y-o2.y;
            }
        });
        pq.add(new Point(0,0));

        while(!pq.isEmpty()){
            Point p=pq.poll();
            if(!visited[p.x]){
                visited[p.x]=true;
                for(Edge temp:g.ll[p.x]){
                    if(!visited[temp.v]){
			if(weight[temp.v]>weight[p.x]+temp.weight){
                            weight[temp.v]=weight[p.x]+temp.weight;
                            pq.add(new Point(temp.v,weight[temp.v]));
			}
                    }
                }
            }
        }
        System.out.println(weight[n-1]);
    }
}
class Edge implements Comparable<Edge>{
    int v,weight;
    public Edge(int v,int weight){
        this.v=v;
        this.weight=weight;
    }
    public int compareTo(Edge o){
        return this.weight-o.weight;
    }
}
class Graph{
    int v;
    LinkedList<Edge>[] ll;
    public Graph(int v){
        this.v=v;
        ll=new LinkedList[v];
        for(int i=0;i<v;i++)ll[i]=new LinkedList();
    }
    public void addEdge(int u,int v,int weight){
        ll[u].add(new Edge(v,weight));
        ll[v].add(new Edge(u,weight));
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Prims Implementation

public class Candidate {
    public static void main(String[] args) throws Exception {
        FastReader sc=new FastReader();
        int n=sc.nextInt();
        boolean[] visited=new boolean[n];
        int[] parent=new int[n];
        parent[0]=-1;
        int[] weight=new int[n];
        Arrays.fill(weight,Integer.MAX_VALUE);
        weight[0]=0;
        LinkedList<Edge>[] ll=new LinkedList[n];
        for(int i=0;i<n;i++)ll[i]=new LinkedList<>();
        int e=sc.nextInt();
        for(int i=0;i<e;i++){
            int x=sc.nextInt();
            int y=sc.nextInt();
            int z=sc.nextInt();
            ll[x].add(new Edge(y,z));
            ll[y].add(new Edge(x,z));
        }
        PriorityQueue<Point> pq=new PriorityQueue<>(new Comparator<Point>() {
            @Override
            public int compare(Point o1, Point o2) {
                return o1.y-o2.y;
            }
        });
        pq.add(new Point(0,0));
        while(!pq.isEmpty()){
            Point p=pq.poll();
            if(!visited[p.x]){
                visited[p.x]=true;
                for(Edge j:ll[p.x]){
                    if(!visited[j.v]){
			if(weight[j.v]>j.weight){
                       	    weight[j.v]=j.weight;
                            parent[j.v]=p.x;
                            pq.add(new Point(j.v,weight[j.v]));
			}
                    }
                }
            }
        }
        int sol=0;
        for(int i=0;i<n;i++)sol+=weight[i];
        System.out.println(sol);
        for(int i=n-1;i>=0;i--){
            System.out.println(i+"->"+parent[i]);
        }
    }

}
class Edge implements Comparable<Edge>{
    int v,weight;
    public Edge(int v,int weight){
        this.v=v;
        this.weight=weight;
    }
    public int compareTo(Edge o){
        return this.weight-o.weight;
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Merge Sort
public static void mergeSort(int[] a,int s,int e){
        if(s>=e)return;
        //Divide
        int mid=s+(e-s)/2;
        //Recursion
        mergeSort(a,s,mid);
        mergeSort(a,mid+1,e);
        //Merge
        merge(a,s,e);
    }
    public static void merge(int[] a,int s,int e){
        int mid=s+(e-s)/2;
        int i=s,j=mid+1;
        int[] temp=new int[e-s+1];
        int k=0;
        while(i<=mid && j<=e){
            if(a[i]<=a[j])temp[k++]=a[i++];
            else temp[k++]=a[j++];
        }
        while(i<=mid)temp[k++]=a[i++];
        while(j<=e)temp[k++]=a[j++];
        i=s;
        for(k=0;k<temp.length;k++)a[i++]=temp[k];
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Longest Increasing Subsequence
	int[] arr={3, 10, 2, 1, 20};  		 //---O(n^2)
        int[] dp=new int[arr.length];
        int[] p=new int[arr.length];
        Arrays.fill(dp,1);
        Arrays.fill(p,-1);
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<i;j++){
                if(arr[i]>arr[j] && dp[i]<dp[j]+1){
                    dp[i]=dp[j]+1;
                    p[i]=j;
                }
            }
        }
        int max=0,index=-1;
        for(int i=0;i<arr.length;i++){
            if(dp[i]>max){
                max=dp[i];
                index=i;
            }
        }
        System.out.println(max);
        LinkedList<Integer> ll=new LinkedList<>();
        ll.addFirst(arr[index]);
        while(p[index]!=-1){
            ll.addFirst(arr[p[index]]);
            index=p[index];
        }
        System.out.println(ll);
----------------------------------------------------------------------------------------
        int[] arr=new int[n];            	//---O(nLogn)
        for(int i=0;i<n;i++)arr[i]=sc.nextInt();
        int[] dp=new int[n+1];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0]=Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            int l=0,r=dp.length-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(dp[mid]<=arr[i]){
                    l=mid+1;
                }
                else r=mid-1;
            }
            dp[l]=arr[i];
        }
	while(count<=n && dp[count]!=Integer.MAX_VALUE)count++;
        System.out.println(count-1);
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Longest Common Substring
 
String s=" "+sc.next(),u=" "+sc.next();
int max=0;
int[][] dp=new int[u.length()][s.length()];

for(int i=1;i<u.length();i++){
    for(int j=1;j<s.length();j++){
        if(u.charAt(i)==s.charAt(j)){
           dp[i][j]+=dp[i-1][j-1]+1;
           max=Math.max(max,dp[i][j]);
         }
     }
 }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Longest Common Subsequences

String s=" "+sc.next(),u=" "+sc.next();
int[][] dp=new int[u.length()][s.length()];
for(int i=1;i<u.length();i++){
   for(int j=1;j<s.length();j++){
      if(u.charAt(i)==s.charAt(j))dp[i][j]=dp[i-1][j-1]+1;
      else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
    }
 }

System.out.println(dp[u.length()-1][s.length()-1]);
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Rolling Hash ->hash(s)=s[0]+(s[1]·p^1)+(s[2]·p^2)+...+(s[n-1]·p^n-1)%MOD
long long compute_hash(string const& s) {
    const int p = 31;   // For both upper and lower case p=53
    const int m = 1e9 + 9;
    long long hash_value = 0;
    long long p_pow = 1;
    for (char c : s) {
        hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
        p_pow = (p_pow * p) % m;
    }
    return hash_value;
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Segment Tree
  
 //Build Tree - The length of tree array should be approx 4*n+1
              - if length of arrays is 1)power of 2 then number of nodes in its segment tree is 1 + 2 + 4 ... 2^x = 2^{x+1}-1 ==2*number of leaf nodes
                                       2)is not power of 2 then segment number of leaf nodes = 2^{log(len)+1}
                                         Therefore total number of nodes in the segment tree = 2*number of leaf nodes=2*(2^{log(len)+1})==4*len.

    public static void buildTree(int[] tree,int[] a,int index,int s,int e){
        if(s>e)return;
        if(s==e){
            tree[index]=a[s];
            return;
        }
        int mid=s+(e-s)/2;
        //left subtree
        buildTree(tree,a,2*index,s,mid);
        //right subtree
        buildTree(tree,a,2*index+1,mid+1,e);
    

        int left=tree[2*index];
        int right=tree[2*index+1];
        tree[index]=Integer.min(left,right);
    }
    //Query
    public static int query(int[] tree,int index,int s,int e,int qs,int qe){
        //3 Cases
        //No overlap
        if(qs>e || qe<s)return Integer.MAX_VALUE;
        //Complete Overlap
        if(s>=qs && e<=qe)return tree[index];
        //Partial Overlap -> Call both sides
        int mid=s+(e-s)/2;
        int left=query(tree,2*index,s,mid,qs,qe);
        int right=query(tree,2*index+1,mid+1,e,qs,qe);
        return Integer.min(left,right);
    }
    //Update
    public static void update(int[] tree,int index,int s,int e,int i,int value){
        //No overlap
        if(i<s || i>e)return;
        //Reached leaf node
        if(s==e){
            tree[index]=value;
            return;
        }
        //Partial Overlap
        int mid=s+(e-s)/2;
        if(i>=s && i<=mid)update(tree,2*index,s,mid,i,value,false);
        else update(tree,2*index+1,mid+1,e,i,value);
       
        tree[index]=tree[2*index]|tree[2*index+1];
    }
    //Range Update
    public static void updateRange(int[] tree,int index,int s,int e,int rs,int re,int inc){
        //No overlap
        if(re<s || rs>e)return;
        //Reached Leaf Node
        if(s==e){
            tree[index]+=inc;
            return;
        }
        //Lying in Range - Call both side
        int mid=s+(e-s)/2;
        updateRange(tree,2*index,s,mid,rs,re,inc);
        updateRange(tree,2*index+1,mid+1,e,rs,re,inc);
        tree[index]=Integer.min(tree[2*index],tree[2*index+1]);
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Chicken Mcnugget Theorem
*If a and b are coprime natural number then,
 -the largest no. that cannot be written in the form of ax+by is a*b-a-b.
 -the no. of positive integer that can't be expressed as ax+by is (a-1)*(b-1)/2
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Square Root Decomposition
public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int[] a={1,3,5,2,7,6,3,1,4,8,0,0};
        int rn=(int)Math.sqrt(a.length);
        int[] blocks=new int[a.length/rn];
        sqrt(blocks,a,rn);
        update(blocks,a,rn,2,15);
        System.out.println(query(blocks,a,rn,2,8));
    }
    //Build block of array
    public static void sqrt(int[] blocks,int[] a,int rn){
        int block_id=-1;
        for(int i=0;i<a.length;i++){
            if(i%rn==0)block_id++;
            blocks[block_id]+=a[i];
        }
    }
    //Queries
    public static int query(int[] blocks,int[] a,int rn,int l,int r){
        int ans=0;
        while(l<=r && l%rn!=0)ans+=a[l++];
        while(r>=l &&   r%rn!=rn-1)ans+=a[r--];
        while(l<r){
            ans+=blocks[l/rn];
            l+=rn;
        }
        return ans;
    }
    //Update
    public static void update(int[] blocks,int[] a,int rn,int i,int value){
        int block_id=i/rn;
        blocks[block_id]+=(value-a[i]);
        a[i]=value;
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Optimised Prime Sieve(Sieve Of Eratosthenes)

public static void primeSieve(int[] p,int n){
        p[0]=p[1]=0;
        p[2]=1;
        //Mark all odd no. as prime
        for(int i=3;i<=n;i+=2)p[i]=1;
        //Sieve login to marks non-prime as 0
        for(int i=3;i<=n;i+=2){
            if(p[i]==1){
                //mark all multiples of this no. as non-prime
                //j=i*i
                for(int j=i*i;j<=n;j+=i)p[j]=0;
            }
        }
    }
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
*Travelling Salesman Problem(Dynamic Programming)
public class test {
    static int[][] dist={{0,20,42,25},{20,0,30,34}, {42,30,0,10}, {25,34,10,0}};
    static int n=4;
    static int visited_all=(1<<n)-1;
    static int[][] dp=new int[(int)Math.pow(2,n)][4];

    public static int tsp(int mask,int pos){
        if(mask==visited_all)return dist[pos][0];
        if(dp[mask][pos]!=-1)return dp[mask][pos];
        int ans=Integer.MAX_VALUE;
        for(int city=0;city<n;city++){
            if((mask&(1<<city))==0){
                int new_ans=dist[pos][city]+tsp(mask|(1<<city),city);
                ans=Math.min(ans,new_ans);
            }
        }
        return dp[mask][pos]=ans;
    }
    public static void main(String[] args) {
        FastReader sc = new FastReader();
        for(int[] i:dp)Arrays.fill(i,-1);
        System.out.println(tsp(1, 0));
    }
}
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
